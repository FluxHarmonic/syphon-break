(define-module (syphon player)
  (import (mesche list)
          (mesche math)
          (substratic input)
          (substratic window)
          (substratic physics)
          (substratic renderer)
          (syphon effect)
          (syphon input)
          (syphon powerup)
          (syphon weapon)))

(define-record-type player
  (fields x y
          vel-x vel-y
          state
          sphere
          effects
          weapon
          fire-time
          shield-amount
          energy-amount))

(define (create-player window) :export
  (make-player :x (- (/ (window-width window) 2) (/ player-size 2))
               :y (- (window-height window) 300)
               :vel-x 0
               :vel-y 0
               :state 'alive
               :effects '()
               :sphere (make-sphere player-x player-y (/ player-size 2))
               :weapon (make-weapon :damage 10
                                    :bullet-speed 700
                                    :fire-rate 0.5
                                    :energy-cost 5)
               :fire-time 0
               :shield-amount 100
               :energy-amount 100))

;; Define some game state
(define player-ship-color (rgb 100 100 255))
(define player-size 80 :export)
(define player-default-move-speed 500)
(define player-move-speed player-default-move-speed)            ; Pixels per second
(define player-energy-depletion 1)

(define (player-fire-weapon player weapon new-bullet-func time-delta)
  (if (<= (player-fire-time player) 0)
      ;; TODO: Why is there a heap overflow when this is a `begin`?
      (let ((foo t))
        ;; Delay the next fire by the fire rate
        (player-fire-time-set! player (weapon-fire-rate weapon))

        ;; Subtract the energy cost of firing the weapon
        (player-energy-amount-set! player
                                   (- (player-energy-amount player)
                                      (weapon-energy-cost weapon)))

        ;; Fire the weapon and save the new bullet
        (new-bullet-func
         (fire-weapon (player-weapon player)
                      (player-x player)
                      (player-y player)
                      -1
                      time-delta
                      'player))))
  (player-fire-time-set! player (- (player-fire-time player)
                                   time-delta)))

(define (read-controller player controller time-delta)
  ;; Look at controller state to change velocity
  (let ((neg-move (* -1 player-move-speed)))
    (if (controller-up controller)
        (player-vel-y-set! player neg-move)
        (if (controller-down controller)
            (player-vel-y-set! player player-move-speed)
            (player-vel-y-set! player 0)))
    (if (controller-left controller)
        (player-vel-x-set! player neg-move)
        (if (controller-right controller)
            (player-vel-x-set! player player-move-speed)
            (player-vel-x-set! player 0)))))

(define (deplete-player player time-delta)
  (player-energy-amount-set! player
                             (- (player-energy-amount player)
                                (* player-energy-depletion time-delta)))

  ;; Are we out of energy?
  (if (< (player-energy-amount player) 1)
      (player-state-set! player 'depleted)))

(define player-move-depletion 0.005)

(define (move-player player time-delta)
  ;; Update player position
  (if (not (equal? 0 (player-vel-x player)))
      (let ((move-x (* (player-vel-x player)
                       time-delta)))
        (player-energy-amount-set! player
                                   (- (player-energy-amount player)
                                      (abs (* move-x player-move-depletion))))
        (player-x-set! player
                       (+ (player-x player) move-x))))

  (if (not (equal? 0 (player-vel-y player)))
      (let ((move-y (* (player-vel-y player)
                       time-delta)))

        (player-energy-amount-set! player
                                   (- (player-energy-amount player)
                                      (abs (* move-y player-move-depletion))))
        (player-y-set! player (+ (player-y player)
                                 move-y))))
  ;; Set the sphere center
  (sphere-center-x-set! (player-sphere player) (player-x player))
  (sphere-center-y-set! (player-sphere player) (player-y player)))

(define (update-player player controller new-bullet-func time-delta) :export
  ;; Is the player still alive
  (if (> (player-shield-amount player) 0)
      (begin
        ;; Apply effects
        (player-effects-set! player
                             (update-effects (player-effects player)
                                             player
                                             time-delta))

        ;; Deplete energy
        (deplete-player player time-delta)

        ;; Read controller state
        (read-controller player controller time-delta)

        ;; Move the player based on velocity
        (move-player player time-delta)

        ;; Fire the weapon if it's time
        (if (and (not (controller-siphon controller))
                 (controller-fire controller))
            ;; Fire the weapon
            (player-fire-weapon player
                                (player-weapon player)
                                new-bullet-func
                                time-delta)

            ;; Keep ticking down the fire time
            (if (> (player-fire-time player) 0)
                (player-fire-time-set! player (max 0
                                                   (- (player-fire-time player)
                                                      time-delta))))))

      ;; We died
      (player-state-set! player 'died)))

(define (render-player renderer player) :export
  (renderer-draw-rect renderer
                      (- (player-x player) (/ player-size 2))
                      (- (player-y player) (/ player-size 2))
                      player-size player-size
                      player-ship-color)
  (render-effects renderer (player-effects player) player))

(define (player-add-effect! player effect) :export
  (player-effects-set! player (cons effect (player-effects player))))

;;; -- Powerup Implementations --

(define energy-powerup-effect-color (rgb 255 0 0))

(define (energy-powerup-effect-renderer renderer player)
  (renderer-draw-rect renderer
                      ;; Center the glyph below the player ship
                      (- (player-x player) 15)
                      (+ 15 (+ (player-y player) (/ player-size 2)))
                      30 30
                      energy-powerup-effect-color))

(define (make-energy-powerup-effect energy-amount)
  (let ((current-time 0)
        (duration 3))
    (lambda (player enemies)
      (player-add-effect!
       player
       (make-effect :updater (lambda (player time-delta)
                               (set! current-time (+ current-time time-delta))
                               (if (< current-time duration)
                                   (player-energy-amount-set! player
                                                              (min 100
                                                                   (+ (player-energy-amount player)
                                                                      (* (/ energy-amount duration)
                                                                         time-delta))))))
                    :renderer energy-powerup-effect-renderer)))))

(define (spawn-energy-powerup window) :export
  (let ((x (rand-int (- (window-width window) 100)))
        (y -100)
        (size 85))
    (make-powerup :x x
                  :y y
                  :vel-x 0
                  :vel-y 300
                  :alive t
                  :color (rgb 255 135 84)
                  :size size
                  :sphere (make-sphere x y (/ size 2))
                  :applicator (make-energy-powerup-effect 20))))

;;; Speed powerup

(define speed-powerup-color (rgb 197 255 97))

;; TODO: Add a particle effect coming from behind the ship to make it look like
;; it has improved boosters
(define (speed-powerup-effect-renderer renderer player)
  (renderer-draw-rect renderer
                      ;; Center the glyph below the player ship
                      (+ 25 (- (player-x player) 15))
                      (+ 15 (+ (player-y player) (/ player-size 2)))
                      30 30
                      speed-powerup-color))

(define (make-speed-powerup-effect new-speed)
  (let ((current-time 0)
        (duration 5))
    (lambda (player enemies)
      (player-add-effect!
       player
       (make-effect :updater (lambda (player time-delta)
                               (set! current-time (+ current-time time-delta))
                               (if (< current-time duration)
                                   (set! player-move-speed new-speed)
                                   (begin
                                     ;; Set the speed back to default and return nil to
                                     ;; remove the effect
                                     (set! player-move-speed player-default-move-speed)
                                     nil)))
                    :renderer speed-powerup-effect-renderer)))))

(define (spawn-speed-powerup window) :export
  (let ((x (rand-int (- (window-width window) 100)))
        (y -100)
        (size 85))
    (make-powerup :x x
                  :y y
                  :vel-x 0
                  :vel-y 500
                  :alive t
                  :color speed-powerup-color
                  :size size
                  :sphere (make-sphere x y (/ size 2))
                  :applicator (make-speed-powerup-effect 700))))
